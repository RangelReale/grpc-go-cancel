// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	Handler(ctx context.Context, opts ...grpc.CallOption) (DataService_HandlerClient, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) Handler(ctx context.Context, opts ...grpc.CallOption) (DataService_HandlerClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[0], "/omdata.DataService/Handler", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServiceHandlerClient{stream}
	return x, nil
}

type DataService_HandlerClient interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type dataServiceHandlerClient struct {
	grpc.ClientStream
}

func (x *dataServiceHandlerClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataServiceHandlerClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations should embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	Handler(DataService_HandlerServer) error
}

// UnimplementedDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) Handler(DataService_HandlerServer) error {
	return status.Errorf(codes.Unimplemented, "method Handler not implemented")
}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_Handler_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServiceServer).Handler(&dataServiceHandlerServer{stream})
}

type DataService_HandlerServer interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type dataServiceHandlerServer struct {
	grpc.ServerStream
}

func (x *dataServiceHandlerServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataServiceHandlerServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omdata.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Handler",
			Handler:       _DataService_Handler_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "data.proto",
}
